plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias(libs.plugins.compose.compiler)
}

android {
    compileSdk = 36
    namespace 'com.peterpan.wolfs3d'

    defaultConfig {
        applicationId "com.peterpan.wolfs3d"
        minSdkVersion 24
        targetSdkVersion 36
        versionCode 1
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = 17
    }
}

dependencies {
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.activity.ktx)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.ui.tooling)
    implementation(libs.androidx.material3)
    implementation(libs.circum)
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        tasks.named("bundle${variant.name.capitalize()}") { task ->
            doLast {
                if (task.toString().contains("Release")) {
                    def originalFile = output.outputFile
                    def newFileName = "${applicationId}-release-${versionName}(${versionCode}).aab"
                    def parent = originalFile.parent.toString().replace("apk", "bundle")
                    def originalBundle = file("${parent}/app-release.aab")

                    println("renaming ${parent}/app-release.aab to ${parent}/${newFileName}")
                    originalBundle.renameTo("$parent/$newFileName")
                }
            }
        }
    }
}